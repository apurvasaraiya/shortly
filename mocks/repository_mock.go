// Code generated by MockGen. DO NOT EDIT.
// Source: repository/repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// FetchIDFromURL mocks base method.
func (m *MockRepository) FetchIDFromURL(url string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchIDFromURL", url)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchIDFromURL indicates an expected call of FetchIDFromURL.
func (mr *MockRepositoryMockRecorder) FetchIDFromURL(url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchIDFromURL", reflect.TypeOf((*MockRepository)(nil).FetchIDFromURL), url)
}

// FetchMetrics mocks base method.
func (m *MockRepository) FetchMetrics(topN int) (map[string]uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchMetrics", topN)
	ret0, _ := ret[0].(map[string]uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchMetrics indicates an expected call of FetchMetrics.
func (mr *MockRepositoryMockRecorder) FetchMetrics(topN interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchMetrics", reflect.TypeOf((*MockRepository)(nil).FetchMetrics), topN)
}

// FetchURLFromID mocks base method.
func (m *MockRepository) FetchURLFromID(id string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchURLFromID", id)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchURLFromID indicates an expected call of FetchURLFromID.
func (mr *MockRepositoryMockRecorder) FetchURLFromID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchURLFromID", reflect.TypeOf((*MockRepository)(nil).FetchURLFromID), id)
}

// IncrementCountForHostname mocks base method.
func (m *MockRepository) IncrementCountForHostname(hostname string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncrementCountForHostname", hostname)
	ret0, _ := ret[0].(error)
	return ret0
}

// IncrementCountForHostname indicates an expected call of IncrementCountForHostname.
func (mr *MockRepositoryMockRecorder) IncrementCountForHostname(hostname interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrementCountForHostname", reflect.TypeOf((*MockRepository)(nil).IncrementCountForHostname), hostname)
}

// SaveURLAndId mocks base method.
func (m *MockRepository) SaveURLAndId(url, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveURLAndId", url, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveURLAndId indicates an expected call of SaveURLAndId.
func (mr *MockRepositoryMockRecorder) SaveURLAndId(url, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveURLAndId", reflect.TypeOf((*MockRepository)(nil).SaveURLAndId), url, id)
}
