// Code generated by MockGen. DO NOT EDIT.
// Source: service/url_service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockURLService is a mock of URLService interface.
type MockURLService struct {
	ctrl     *gomock.Controller
	recorder *MockURLServiceMockRecorder
}

// MockURLServiceMockRecorder is the mock recorder for MockURLService.
type MockURLServiceMockRecorder struct {
	mock *MockURLService
}

// NewMockURLService creates a new mock instance.
func NewMockURLService(ctrl *gomock.Controller) *MockURLService {
	mock := &MockURLService{ctrl: ctrl}
	mock.recorder = &MockURLServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockURLService) EXPECT() *MockURLServiceMockRecorder {
	return m.recorder
}

// EncodeURL mocks base method.
func (m *MockURLService) EncodeURL(url string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EncodeURL", url)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EncodeURL indicates an expected call of EncodeURL.
func (mr *MockURLServiceMockRecorder) EncodeURL(url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EncodeURL", reflect.TypeOf((*MockURLService)(nil).EncodeURL), url)
}

// FetchURLFromID mocks base method.
func (m *MockURLService) FetchURLFromID(id string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchURLFromID", id)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchURLFromID indicates an expected call of FetchURLFromID.
func (mr *MockURLServiceMockRecorder) FetchURLFromID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchURLFromID", reflect.TypeOf((*MockURLService)(nil).FetchURLFromID), id)
}

// IncrementVisitCountForHostname mocks base method.
func (m *MockURLService) IncrementVisitCountForHostname(url string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncrementVisitCountForHostname", url)
	ret0, _ := ret[0].(error)
	return ret0
}

// IncrementVisitCountForHostname indicates an expected call of IncrementVisitCountForHostname.
func (mr *MockURLServiceMockRecorder) IncrementVisitCountForHostname(url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrementVisitCountForHostname", reflect.TypeOf((*MockURLService)(nil).IncrementVisitCountForHostname), url)
}

// Metrics mocks base method.
func (m *MockURLService) Metrics() (map[string]uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Metrics")
	ret0, _ := ret[0].(map[string]uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Metrics indicates an expected call of Metrics.
func (mr *MockURLServiceMockRecorder) Metrics() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Metrics", reflect.TypeOf((*MockURLService)(nil).Metrics))
}
